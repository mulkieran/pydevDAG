#!/usr/bin/python
#
# -*- coding: utf-8 -*-
# Copyright (C) 2015  Red Hat, Inc.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions of
# the GNU General Public License v.2, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY expressed or implied, including the implied warranties of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.  You should have received a copy of the
# GNU General Public License along with this program; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.  Any Red Hat trademarks that are incorporated in the
# source code or documentation are not subject to the GNU General Public
# License and may only be used or replicated with the express permission of
# Red Hat, Inc.
#
# Red Hat Author(s): Anne Mulhern <amulhern@redhat.com>

"""
    checktype
    =========

    Python script for checking that partition devices that are partitions
    of block devices are themselves partition devices.

    .. moduleauthor::  Anne Mulhern  <amulhern@redhat.com>
"""

import argparse
import os
import stat
import sys
import uuid

from systemd import journal

import pyudev

import pydevDAG


MESSAGE_UUID = uuid.UUID('3f2e28cedede453cbd9a88655e31bc43')

MESSAGE_IDS = {
   MESSAGE_UUID : ["SOURCE", "TARGET", "WWN"]
}


def get_parser():
    """
    Generate an appropriate parser.

    :returns: an argument parser
    :rtype: `ArgumentParser`
    """
    parser = argparse.ArgumentParser()

    parser.add_argument(
       "--listids",
       action="store_true",
       help="list values for MESSAGE_ID and required fields"
    )

    return parser

def get_spindle(graph, device):
    """
    Locates the actual drive corresponding to the device.

    :param DiGraph graph: the graph
    :param str device: the device
    :returns: WWID of drive corresponding to device
    :rtype: str or NoneType
    """
    for (source, target, attrs) in graph.out_edges_iter(device, data=True):
        if attrs['edgetype'] is pydevDAG.EdgeTypes.SPINDLE:
            return graph.node[target]['identifier']
    return None

def main():
    """
    The main method for locating character special files.
    """
    args = get_parser().parse_args()

    if args.listids:
        for uid in MESSAGE_IDS:
            print('%s' % uid.hex)
            for key in MESSAGE_IDS[uid]:
                print('\t%s' % key)
        return 0

    context = pyudev.Context()

    graph_classes = [
       pydevDAG._structure.PyudevGraphs.PARTITION_GRAPHS,
       pydevDAG._structure.PyudevGraphs.SPINDLE_GRAPHS
    ]

    graph = pydevDAG._structure.PyudevAggregateGraph.graph(
       context,
       'partitions',
       graph_classes
    )

    for (source, target, attrs) in graph.edges_iter(data=True):
        if attrs['edgetype'] is pydevDAG.EdgeTypes.PARTITION:
            partition_device = pyudev.Device.from_path(context, source)
            partition_device_node = partition_device.device_node
            partition_device_mode = os.stat(partition_device_node).st_mode

            if stat.S_ISCHR(partition_device_mode):
                disk_number = get_spindle(graph, target)
                journal.send(
                   'character special device file for partition',
                   MESSAGE_ID=MESSAGE_UUID,
                   WWN=str(get_spindle(graph, source)),
                   SOURCE=sourcefile,
                   TARGET=targetfile
                )

    return 0

if __name__ == "__main__":
    sys.exit(main())
